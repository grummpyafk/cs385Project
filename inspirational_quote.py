# -*- coding: utf-8 -*-
"""inspirational_quote_bot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zcwf5QsfXajRsXzOsZ7EzWh41K8z4Ozr
"""

#import numpy
import sys
from nltk.tokenize import RegexpTokenizer
from nltk.corpus import stopwords
from keras.models import Sequential
from keras.layers import Dense, Dropout, LSTM
from keras.utils import np_utils
from keras.callbacks import ModelCheckpoint

import pandas as pd
import numpy as np
import nltk
nltk.download('stopwords', quiet=True)
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer 
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import confusion_matrix, plot_confusion_matrix
naive_bayes_classifier = MultinomialNB()

from google.colab import files
import io
uploaded_item = files.upload()

# Read in csv
df = pd.read_csv('Motivational Quotes Database.csv', encoding = "ISO-8859-1")
df.rename(columns = {'Motivational Quotes Database - https://www.sharpquotes.com':'Quotes'}, inplace = True)
#quotes = df.pop("Quotes")


df = df.tail(45575)
#quotes = quotes.str.lower()
filtered = df["Quotes"].to_string()

#tokenizer = RegexpTokenizer(r'\w+')
#tokens = tokenizer.tokenize(quotes["Quotes"])

#stop = stopwords.words('english')
#quotes.apply(lambda x: [item for item in x if item not in stop])
#quotes = quotes["Quotes"].to_string())
#filtered.replace('\n', ' ')

filtered

#filtered = filtered.replace('\n\d+', ' ')#removes "\n"
#filtered = filtered.replace(r'^\d+\.\s+','') #removes numbers
#tokenizer = RegexpTokenizer('\w+')
#tokens = tokenizer.tokenize(filtered.lower())
#filtered = filter(lambda token: token not in stopwords.words('english'), tokens)

#processing data
filtered = ''.join([i for i in filtered if not i.isdigit()])
filtered = filtered.lower()


# instantiate the tokenizer
tokenizer = RegexpTokenizer(r'\w+')
filtered = tokenizer.tokenize(filtered)

# if the created token isn't in the stop words, make it part of "filtered"
#filtered = filter(lambda token: token not in stopwords.words('english'), tokens)

filtered = " ".join(filtered)

filtered

"""#All code below was taken from https://stackabuse.com/text-generation-with-python-and-tensorflow-keras/
#slight modifications to better suit this project

"""

# create mapping
chars = sorted(list(set(filtered)))
char_to_num = dict((c, i) for i, c in enumerate(chars))

input_len = len(filtered)
vocab_len = len(chars)
print ("Total number of characters:", input_len)
print ("Total vocab:", vocab_len)

# prepare the dataset
seq_length = 100
x_data = []
y_data = []

for i in range(0, input_len - seq_length, 1):
  in_seq = filtered[i:i + seq_length]
  out_seq = filtered[i + seq_length]
  x_data.append([char_to_num[char] for char in in_seq])
  y_data.append(char_to_num[out_seq])

n_patterns = len(x_data)
print ("Total Patterns:", n_patterns)

# reshape X and normalize
X = np.reshape(x_data, (n_patterns, seq_length, 1))
X = X/float(vocab_len)

# one hot encode
y = np_utils.to_categorical(y_data)

# define LSTM model
model = Sequential()
model.add(LSTM(256, input_shape=(X.shape[1], X.shape[2]), return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(256, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(128))
model.add(Dropout(0.2))
model.add(Dense(y.shape[1], activation='softmax'))

# load network weights, use "adam"
model.compile(loss='categorical_crossentropy', optimizer='adam')

filepath = "model_weights_saved.hdf5"
checkpoint = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')
desired_callbacks = [checkpoint]

model.fit(X, y, epochs=20, batch_size=256, callbacks=desired_callbacks)

#loads weights
filename = "model_weights_saved.hdf5"
model.load_weights(filename)
model.compile(loss='categorical_crossentropy', optimizer='adam')

num_to_char = dict((i, c) for i, c in enumerate(chars))

#uses random seed
start = np.random.randint(0, len(x_data) - 1)
pattern = x_data[start]
print("Random Seed:")
print("\"", ''.join([num_to_char[value] for value in pattern]), "\"")

for i in range(100):
    x = np.reshape(pattern, (1, len(pattern), 1))
    x = x / float(vocab_len)
    prediction = model.predict(x, verbose=0)
    index = np.argmax(prediction)
    result = num_to_char[index]

    sys.stdout.write(result)

    pattern.append(index)
    pattern = pattern[1:len(pattern)]